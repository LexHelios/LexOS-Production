version: '3.8'

services:
  # Production-grade vLLM service
  vllm:
    image: vllm/vllm-openai:latest
    container_name: lexos-vllm
    hostname: vllm
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8001:8000"  # vLLM API port
    volumes:
      - vllm-cache:/root/.cache
      - ./models:/models
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - VLLM_GPU_MEMORY_UTILIZATION=0.95
      - VLLM_MAX_MODEL_LEN=32768
      - VLLM_BLOCK_SIZE=32
      - VLLM_SWAP_SPACE=0
      - VLLM_DTYPE=auto
      - VLLM_MAX_NUM_SEQS=256
      - VLLM_MAX_NUM_BATCHED_TOKENS=32768
      - VLLM_TENSOR_PARALLEL_SIZE=1
      - VLLM_WORKER_USE_RAY=false
      - HF_HOME=/root/.cache
    command: >
      --model mistralai/Mistral-7B-Instruct-v0.2
      --host 0.0.0.0
      --port 8000
      --max-model-len 32768
      --gpu-memory-utilization 0.95
      --tensor-parallel-size 1
      --dtype auto
      --api-key token-lexos-vllm
      --served-model-name mistral-7b
      --trust-remote-code
      --download-dir /models
      --disable-log-requests
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: lexos-redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-lexos-redis-2025}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Production PostgreSQL with optimizations
  postgres:
    image: postgres:15-alpine
    container_name: lexos-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=lexos
      - POSTGRES_USER=lexos
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lexos-postgres-2025}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lexos -d lexos"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    command: >
      postgres
      -c shared_buffers=2GB
      -c max_connections=200
      -c effective_cache_size=6GB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=20MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Optimized ChromaDB
  chromadb:
    image: chromadb/chroma:latest
    container_name: lexos-chromadb
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - ALLOW_RESET=FALSE
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_TOKEN:-lexos-chroma-token-2025}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Production-grade LexOS Core
  lexos-core:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - PYTHON_VERSION=3.11
    image: lexos-core:production
    container_name: lexos-core
    restart: unless-stopped
    depends_on:
      vllm:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # WebSocket
    volumes:
      - ./lexos_memory:/app/lexos_memory
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./static:/app/static
      - ./uploads:/app/uploads
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LEXOS_ENV=production
      - VLLM_API_URL=http://vllm:8000
      - VLLM_API_KEY=token-lexos-vllm
      - VLLM_MODEL_NAME=mistral-7b
      - REDIS_URL=redis://:${REDIS_PASSWORD:-lexos-redis-2025}@redis:6379/0
      - DATABASE_URL=postgresql://lexos:${POSTGRES_PASSWORD:-lexos-postgres-2025}@postgres:5432/lexos
      - CHROMADB_URL=http://chromadb:8000
      - CHROMADB_TOKEN=${CHROMA_TOKEN:-lexos-chroma-token-2025}
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - TIMEOUT=300
      - GRACEFUL_TIMEOUT=30
      - KEEP_ALIVE=5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: lexos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - lexos-core
      - vllm
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lexos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - lexos-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

networks:
  lexos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  vllm-cache:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  chroma-data:
    driver: local
  prometheus-data:
    driver: local
  nginx-cache:
    driver: local